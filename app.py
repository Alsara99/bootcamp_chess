import streamlit as st
import chess.pgn
from stockfish import Stockfish
from io import StringIO
from functions import *

st.title("‚ôüÔ∏è–®–∞—Ö–º–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä by Singularity Hub")
mode = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:", ["PGN-—Ñ–∞–π–ª", "FEN-–≤–≤–æ–¥"])

stockfish_path = "stockfish/stockfish.exe"
stockfish = Stockfish(path=stockfish_path)
stockfish.set_depth(18)

#PGN-—Ñ–∞–π–ª
if mode == "PGN-—Ñ–∞–π–ª":
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PGN-—Ñ–∞–π–ª", type=["pgn"])

    if uploaded_file:
        pgn_data = StringIO(uploaded_file.getvalue().decode("utf-8"))
        game = chess.pgn.read_game(pgn_data)

        st.subheader("üîé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–∏–∏")
        st.write(f"**‚ôò–ë–µ–ª—ã–µ:** {game.headers['White']}")
        st.write(f"**‚ôüÔ∏è–ß—ë—Ä–Ω—ã–µ:** {game.headers['Black']}")
        st.write(f"**üèÅ–†–µ–∑—É–ª—å—Ç–∞—Ç:** {game.headers['Result']}")

        # –°–æ–∑–¥–∞—ë–º –¥–æ—Å–∫—É
        board = game.board()
        moves = list(game.mainline_moves())
        moves.append('-')

        if "move_index" not in st.session_state:
            st.session_state.move_index = 0
            st.session_state.last_move = '-'

        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚è™ –ù–∞–∑–∞–¥") and st.session_state.move_index > 0:
                st.session_state.move_index -= 1
        with col2:
            if st.button("‚è© –í–ø–µ—Ä—ë–¥") and st.session_state.move_index < len(moves)-1:
                st.session_state.move_index += 1

        for move in moves[:st.session_state.move_index]:

            board.push(move)

        fen = board.fen()

        stockfish.set_fen_position(fen)
        best_move = stockfish.get_best_move()
        evaluation = stockfish.get_evaluation()


        move = moves[st.session_state.move_index-1]

        comment = generate_move_comment(evaluation)


        st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏")
        st.write(f"**üîÑ–¢–µ–∫—É—â–∏–π —Ö–æ–¥:** {move}")
        st.write(f"**üî•–õ—É—á—à–∏–π —Ö–æ–¥:** {best_move if best_move else '**–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤**'}")
        st.write(f"**üí¨–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π**: {comment}")

        if evaluation["type"] == "cp":
            st.write(f"**üìä–û—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏:** {evaluation['value'] / 100:.2f}")
        elif evaluation["type"] == "mate":
            num = str(evaluation['value'])[-1]
            if evaluation['value'] != 0:
                if 0 < int(num) < 2:
                    st.write(f"**–ú–∞—Ç —á–µ—Ä–µ–∑ {evaluation['value']} —Ö–æ–¥!üèÅ‚ôüÔ∏èüî•**")
                elif 0 < int(num) < 5 :
                    st.write(f"**–ú–∞—Ç —á–µ—Ä–µ–∑ {evaluation['value']} —Ö–æ–¥–∞!üèÅ‚ôüÔ∏èüî•**")
                else:
                    st.write(f"**–ú–∞—Ç —á–µ—Ä–µ–∑ {evaluation['value']} —Ö–æ–¥–æ–≤!üèÅ‚ôüÔ∏èüî•**")
            else:
                st.write("**–ú–∞—Ç!üèÜ‚ôüÔ∏èüí•**")

        board_svg = highlights(board, best_move, [str(move)[:2], str(move)[2:]])
        st.markdown(f'<div style="text-align: center;">{board_svg}</div>', unsafe_allow_html=True)

#FEN-–í–í–û–î
else:
    fen = st.text_input("–í–≤–µ–¥–∏—Ç–µ FEN:", "rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq e6 0 2")

    board = chess.Board(fen)

    stockfish.set_fen_position(fen)
    best_move = stockfish.get_best_move()
    evaluation = stockfish.get_evaluation()

    st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏")
    st.write(f"**üî•–õ—É—á—à–∏–π —Ö–æ–¥:** {best_move if best_move else '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤'}")

    if evaluation["type"] == "cp":
        st.write(f"**üìä–û—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏:** {evaluation['value'] / 100:.2f}")
    elif evaluation["type"] == "mate":
        st.write(f"**–ú–∞—Ç —á–µ—Ä–µ–∑ {evaluation['value']} —Ö–æ–¥–æ–≤!üèÅ‚ôüÔ∏èüî•**")

    board_svg = highlights(board, best_move)
    st.markdown(f'<div style="text-align: center;">{board_svg}</div>', unsafe_allow_html=True)